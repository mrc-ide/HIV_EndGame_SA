tau.b = 10,
rho = 0.6,
beta = 0),                        # chain 1
list(alpha = 0.25,
theta = rep(0.1 ,times = N),
phi = rep(0.1, times = N),
tau.b = 100,
rho = 0.9,
beta = -2)                         # chain 2
)
# Parameters to monitor
paramsBYM2IMD <- c("sigma2.b", "rho", "overallRR", "resRR", "proba.resRR", "RR.beta", "SMR", "e", "mu", "alpha", "b", "theta", "phi")
# MCMC setting
ni <- 100000  # nb iterations
nt <- 100    # thinning interval
nb <- 20000  # nb iterations as burn-in
nc <- 2      # nb chains
# Run BYM2 IMD
BYM2IMDsamples <- nimbleMCMC(code = BYM2CodeIMD,
data = StillbirthData_IMD,
constants = StillbirthConst_IMD,
inits = initsBYM2IMD,
monitors = paramsBYM2IMD,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
# Check convergence - BYM2 with IMD
# traceplots and autocorrelation plots
BYM2IMD_ggmcmc <- ggs(BYM2IMDsamples$samples)
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p1
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p2
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p3
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p4
p1/p2/p3/p4
# Gelman Rubin convergence diagnostic
GR.diagBYM2IMD <- gelman.diag(BYM2IMDsamples$samples, multivariate = FALSE)
all(GR.diagBYM2IMD$psrf[,"Point est."] < 1.1, na.rm = TRUE)
which(GR.diagBYM2IMD$psrf[,"Point est."] > 1.1)
# Comparing the model by WAIC
BYMIMDsamples$WAIC
BYM2IMDsamples$WAIC
#median SMR, RR, and hyperpriors of BYM model
tab <-
round(BYMIMDsamples$summary$all.chains[c("RR.beta","sigma2.theta", "sigma2.phi"),
c("Median", "95%CI_low", "95%CI_upp")], digits = 3
)
rownames(tab) <- c("RR of IMD",
"$\\sigma^2_{theta}$", "$\\sigma^2_{phi}$")
knitr::kable(tab, caption = "Median and 95%CrI for the deprivation covariate coefficients and hyperparameters of the BYM model.") %>%  kable_styling(bootstrap_options = "striped", position = "center")
# SMR of both models
England_SMR$BYM2_SMR <- BYM2IMDsamples$summary$all.chains[paste0("SMR[", 1:N, "]"), "Median"]
England_SMR$BYM_SMR <- BYMIMDsamples$summary$all.chains[paste0("SMR[", 1:N, "]"), "Median"]
# residual SMR of both modes
England_SMR$BYM2_resRR <- BYM2IMDsamples$summary$all.chains[paste0("resRR[", 1:N, "]"), "Mean"]
England_SMR$BYM_resRR <- BYMIMDsamples$summary$all.chains[paste0("resRR[", 1:N, "]"), "Mean"]
# probability that SMR > 1 of both models
England_SMR$BYM2_proba.resRR <- BYM2IMDsamples$summary$all.chains[paste0("proba.resRR[", 1:N, "]"), "Mean"]
England_SMR$BYM_proba.resRR <- BYMIMDsamples$summary$all.chains[paste0("proba.resRR[", 1:N, "]"), "Mean"]
# probability that SMR > 1 divided into categories for BYM model
England_SMR$BYM_proba.resRR_classes <- cut(England_SMR$BYM_proba.resRR,
breaks = c(min(England_SMR$BYM_proba.resRR),
c(0.2, 0.8),
max(England_SMR$BYM_proba.resRR)),
include.lowest = T)
# Plot Crude SMR
ggplot() + geom_sf(data = England_SMR, aes(fill=SMR), col = NA) + ggtitle("Crude SMR") + scale_fill_viridis_c(guides(name = "SMR")) + guides() + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m1
# Plot BYM Smoothed SMR
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_SMR), col = NA) + ggtitle("Smoothed SMR") + scale_fill_viridis_c(guides(name = "SMR")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m2
# Plot Residual RR
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_resRR), col = NA) + ggtitle("RR of deprivation") + scale_fill_viridis_c(guides(name = "ResRR")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m4
#Plot Probability Residual RR > 1
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_proba.resRR), col = NA) + ggtitle("Probabilty RR>1") + scale_fill_viridis_c(guides(name = "P(RR>1)")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 11))-> m6
# Plot probability of residual RR > 1 categories
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_proba.resRR_classes), col = NA) + ggtitle("Probabilty RR>1") + scale_fill_viridis_d(guides(name = "P(RR>1) \nCategories")) + theme_bw() + theme(axis.text = element_blank())-> m7
England_SMR$BYM2_proba.resRR_classes
# put all the maps together
(m1|m2) -> SMRmaps
(m4|m6|m7) -> maps
data.frame(model = c(rep("Crude", N), rep("BYM", N)),
SMR =c(England_SMR$SMR, England_SMR$BYM_SMR)) %>%
ggplot() + geom_boxplot(aes(x = model, y = SMR)) + xlab("Model") +
theme_bw() + theme(text = element_text(size = 14)) -> boxplots_SMR
boxplots_SMR
SMRmaps + (plot_annotation(tag_levels = 'A'))
maps + (plot_annotation(tag_levels = 'A'))
boxplots_SMR
tab <-
round(
BYMIMDsamples$summary$all.chains[c("RR.beta","sigma2.phi", "sigma2.theta"),
c("Median", "95%CI_low", "95%CI_upp")],
digits = 3
)
rownames(tab) <- c("RR of IMD",
"$\\sigma^2_{phi}$","$\\sigma^2_{theta}$")
knitr::kable(tab, caption = "Table 1. Posterior distribution of deprivation relative risk and hyperparameters of the BYM model.") %>%  kable_styling(bootstrap_options = "striped", position = "center")
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p5
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p6
p5/p6
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p7
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p8
p7/p8
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p9
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p10
p9/p10
BYM2IMD_ggmcmc <- ggs(BYM2IMDsamples$samples)
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p1
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p2
p1/p2
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p3
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p4
p3/p4
# Comparing the model by WAIC
tab <- matrix(c("BYM", "BYM2", 1543.272, 1545.254), ncol = 2, byrow = TRUE)
rownames(tab) <- c("Model", "WAIC")
knitr::kable(tab, caption = "Supplementary Table 1. WAIC results of BYM and BYM2") %>%  kable_styling(bootstrap_options = "striped", position = "center")
#median SMR, RR, and hyperpriors of BYM model
tab1 <-
round(BYMIMDsamples$summary$all.chains[c("RR.beta","sigma2.theta", "sigma2.phi"),
c("Median", "95%CI_low", "95%CI_upp")], digits = 3
)
rownames(tab1) <- c("RR of IMD",
"$\\sigma^2_{theta}$", "$\\sigma^2_{phi}$")
knitr::kable(tab1, caption = "Median and 95%CrI for the deprivation covariate coefficients and hyperparameters of the BYM model.") %>%  kable_styling(bootstrap_options = "striped", position = "center")
England_SMR$BYM_proba.resRR
is.na(England_SMR$BYM_proba.resRR)
sum(is.na(England_SMR$BYM_proba.resRR))
effectiveSize(BYMIMD_ggmcmc)
effectiveSize(BYMIMD_ggmcmc$value)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi")
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>% effectiveSize()
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>% effectiveSize(value)
class(BYMIMD_ggmcmc)
class(BYMIMDsamples)
effectiveSize(BYM2IMDsamples)
effectiveSize(BYM2IMDsamples$samples)
summary(effectiveSize(BYM2IMDsamples$samples))
summary(effectiveSize(BYM2IMDsamples$samples["RR.beta","sigma2.phi", "sigma2.theta"]))
effectiveSize(BYM2IMDsamples$samples[c("RR.beta","sigma2.phi", "sigma2.theta")])
names(BYM2IMDsamples$samples)
effectiveSize(BYM2IMDsamples$samples)[c("RR.beta","sigma2.phi", "sigma2.theta")]
effectiveSize(BYMIMDsamples$samples)[c("RR.beta","sigma2.phi", "sigma2.theta")]
# MCMC settings
ni <- 200000  # nb iterations
nt <- 200    # thinning interval
nb <- 40000  # nb iterations as burn-in
nc <- 2      # nb chains
# Run BYM IMD
BYMIMDsamples <- nimbleMCMC(code = BYMCodeIMD,
data = StillbirthDataBYM_IMD,
constants = StillbirthConstBYM_IMD,
inits = initsBYMIMD,
monitors = paramsBYMIMD,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
# Run BYM2 IMD
BYM2IMDsamples <- nimbleMCMC(code = BYM2CodeIMD,
data = StillbirthData_IMD,
constants = StillbirthConst_IMD,
inits = initsBYM2IMD,
monitors = paramsBYM2IMD,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
BYMIMDsamples$WAIC
BYM2IMDsamples$WAIC
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p7
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p8
p7/p8
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p5
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p6
p5/p6
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p9
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p10
p9/p10
BYM2IMD_ggmcmc <- ggs(BYM2IMDsamples$samples)
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p1
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p2
p1/p2
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p3
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p4
p3/p4
# Comparing the model by WAIC
tab2 <- matrix(c("BYM", "BYM2", 1543.272, 1545.254), ncol = 2, byrow = TRUE)
rownames(tab2) <- c("Model", "WAIC")
knitr::kable(tab2, caption = "Supplementary Table 1. WAIC results of BYM and BYM2") %>%  kable_styling(bootstrap_options = "striped", position = "center")
knitr::kable(tab2, caption = "Supplementary Table 1. WAIC results of BYM and BYM2") %>%  kable_styling(bootstrap_options = "striped", position = "center")
BYMIMDsamples$WAIC
BYM2IMDsamples$WAIC
# Check convergence - BYM IMD
#traceplots and autocorrelation of parameters of interest
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p5
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p6
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p7
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p8
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p9
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p10
# traceplots and autocorrelation plots
p5/p6
p7/p8
p9/p10
# Gelman_and Rubin's convergence diagnostic
GR.diag_BYMIMD <- gelman.diag(BYMIMDsamples$samples, multivariate = FALSE)
all(GR.diag_BYMIMD$psrf[,"Point est."] < 1.1)
which(GR.diag_BYMIMD$psrf[,"Point est."] > 1.1)
all(GR.diag_BYMIMD$psrf[,"Point est."] < 1.1, na.rm = TRUE)
which(GR.diag_BYMIMD$psrf[,"Point est."] > 1.1)
is.na(GR.diag_BYMIMD$psrf[,"Point est."])
which(is.na(GR.diag_BYMIMD$psrf[,"Point est."]))
View(England_SMR)
# Check convergence - BYM2 with IMD
# traceplots and autocorrelation plots
BYM2IMD_ggmcmc <- ggs(BYM2IMDsamples$samples)
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p1
BYM2IMD_ggmcmc %>% filter(Parameter == "sigma2.b") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p2
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p3
BYM2IMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p4
p1/p2/p3/p4
# Gelman Rubin convergence diagnostic
GR.diagBYM2IMD <- gelman.diag(BYM2IMDsamples$samples, multivariate = FALSE)
all(GR.diagBYM2IMD$psrf[,"Point est."] < 1.1, na.rm = TRUE)
which(GR.diagBYM2IMD$psrf[,"Point est."] > 1.1)
#median SMR, RR, and hyperpriors of BYM model
tab1 <-
round(BYMIMDsamples$summary$all.chains[c("RR.beta","sigma2.theta", "sigma2.phi"),
c("Median", "95%CI_low", "95%CI_upp")], digits = 3
)
rownames(tab1) <- c("RR of IMD",
"$\\sigma^2_{theta}$", "$\\sigma^2_{phi}$")
knitr::kable(tab1, caption = "Median and 95%CrI for the deprivation covariate coefficients and hyperparameters of the BYM model.") %>%  kable_styling(bootstrap_options = "striped", position = "center")
# SMR of both models
England_SMR$BYM2_SMR <- BYM2IMDsamples$summary$all.chains[paste0("SMR[", 1:N, "]"), "Median"]
England_SMR$BYM_SMR <- BYMIMDsamples$summary$all.chains[paste0("SMR[", 1:N, "]"), "Median"]
# residual SMR of both modes
England_SMR$BYM2_resRR <- BYM2IMDsamples$summary$all.chains[paste0("resRR[", 1:N, "]"), "Mean"]
England_SMR$BYM_resRR <- BYMIMDsamples$summary$all.chains[paste0("resRR[", 1:N, "]"), "Mean"]
# probability that SMR > 1 of both models
England_SMR$BYM2_proba.resRR <- BYM2IMDsamples$summary$all.chains[paste0("proba.resRR[", 1:N, "]"), "Mean"]
England_SMR$BYM_proba.resRR <- BYMIMDsamples$summary$all.chains[paste0("proba.resRR[", 1:N, "]"), "Mean"]
# probability that SMR > 1 divided into categories for BYM model
England_SMR$BYM_proba.resRR_classes <- cut(England_SMR$BYM_proba.resRR,
breaks = c(min(England_SMR$BYM_proba.resRR),
c(0.2, 0.8),
max(England_SMR$BYM_proba.resRR)),
include.lowest = T)
# Plot Crude SMR
ggplot() + geom_sf(data = England_SMR, aes(fill=SMR), col = NA) + ggtitle("Crude SMR") + scale_fill_viridis_c(guides(name = "SMR")) + guides() + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m1
# Plot BYM Smoothed SMR
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_SMR), col = NA) + ggtitle("Smoothed SMR") + scale_fill_viridis_c(guides(name = "SMR")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m2
# Plot Residual RR
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_resRR), col = NA) + ggtitle("RR of deprivation") + scale_fill_viridis_c(guides(name = "ResRR")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m4
#Plot Probability Residual RR > 1
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_proba.resRR), col = NA) + ggtitle("Probabilty RR>1") + scale_fill_viridis_c(guides(name = "P(RR>1)")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 11))-> m6
# Plot probability of residual RR > 1 categories
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_proba.resRR_classes), col = NA) + ggtitle("Probabilty RR>1") + scale_fill_viridis_d(guides(name = "P(RR>1) \nCategories")) + theme_bw() + theme(axis.text = element_blank())-> m7
England_SMR$BYM2_proba.resRR_classes
# put all the maps together
(m1|m2) -> SMRmaps
(m4|m6|m7) -> maps
data.frame(model = c(rep("Crude", N), rep("BYM", N)),
SMR =c(England_SMR$SMR, England_SMR$BYM_SMR)) %>%
ggplot() + geom_boxplot(aes(x = model, y = SMR)) + xlab("Model") +
theme_bw() + theme(text = element_text(size = 14)) -> boxplots_SMR
boxplots_SMR
View(England_SMR)
# Estimated sample size calculation
effectiveSize(BYM2IMDsamples$samples$chain1)
# Estimated sample size calculation
effectiveSize(BYM2IMDsamples$samples$chain1)
effectiveSize(BYM2IMDsamples$samples$chain2)
# Estimated sample size calculation
effectiveSize(BYMIMDsamples$samples$chain1)
# Estimated sample size calculation
effectiveSize(BYMIMDsamples$samples$chain1)
effectiveSize(BYMIMDsamples$samples$chain2)
# Plot Crude SMR
ggplot() + geom_sf(data = England_SMR, aes(fill=SMR), col = NA) + ggtitle("Crude SMR") + scale_fill_viridis_c(guides(name = "SMR")) + guides() + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m1
# Plot BYM Smoothed SMR
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_SMR), col = NA) + ggtitle("Smoothed SMR") + scale_fill_viridis_c(guides(name = "SMR")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m2
# Plot Residual RR
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_resRR), col = NA) + ggtitle("RR of deprivation") + scale_fill_viridis_c(guides(name = "ResRR")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 10)) -> m4
#Plot Probability Residual RR > 1
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_proba.resRR), col = NA) + ggtitle("Probabilty RR>1") + scale_fill_viridis_c(guides(name = "P(RR>1)")) + theme_bw() + theme(axis.text = element_blank(), text = element_text(size = 11))-> m6
# Plot probability of residual RR > 1 categories
ggplot() + geom_sf(data = England_SMR, aes(fill=BYM_proba.resRR_classes), col = NA) + ggtitle("Probabilty RR>1") + scale_fill_viridis_d(guides(name = "P(RR>1) \nCategories")) + theme_bw() + theme(axis.text = element_blank())-> m7
England_SMR$BYM2_proba.resRR_classes
# put all the maps together
(m1|m2) -> SMRmaps
(m4|m6|m7) -> maps
data.frame(model = c(rep("Crude", N), rep("BYM", N)),
SMR =c(England_SMR$SMR, England_SMR$BYM_SMR)) %>%
ggplot() + geom_boxplot(aes(x = model, y = SMR)) + xlab("Model") +
theme_bw() + theme(text = element_text(size = 14)) -> boxplots_SMR
boxplots_SMR
SMRmaps + (plot_annotation(tag_levels = 'A'))
maps + (plot_annotation(tag_levels = 'A'))
# MCMC setting
ni <- 100000  # nb iterations
nt <- 100    # thinning interval
nb <- 20000  # nb iterations as burn-in
nc <- 2      # nb chains
# MCMC settings
ni <- 100000  # nb iterations
nt <- 100    # thinning interval
nb <- 20000  # nb iterations as burn-in
nc <- 2      # nb chains
# Run BYM IMD
BYMIMDsamples <- nimbleMCMC(code = BYMCodeIMD,
data = StillbirthDataBYM_IMD,
constants = StillbirthConstBYM_IMD,
inits = initsBYMIMD,
monitors = paramsBYMIMD,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
# Check convergence - BYM IMD
#traceplots and autocorrelation of parameters of interest
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p5
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p6
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p7
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p8
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p9
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p10
# traceplots and autocorrelation plots
p5/p6
p7/p8
p9/p10
# Gelman_and Rubin's convergence diagnostic
GR.diag_BYMIMD <- gelman.diag(BYMIMDsamples$samples, multivariate = FALSE)
all(GR.diag_BYMIMD$psrf[,"Point est."] < 1.1, na.rm = TRUE)
which(GR.diag_BYMIMD$psrf[,"Point est."] > 1.1)
# Estimated sample size calculation
effectiveSize(BYM2IMDsamples$samples$chain1)
effectiveSize(BYM2IMDsamples$samples$chain2)
# Estimated sample size calculation
max(effectiveSize(BYM2IMDsamples$samples$chain1))
# Estimated sample size calculation
min(effectiveSize(BYM2IMDsamples$samples$chain1))
# MCMC settings
ni <- 200000  # nb iterations
nt <- 100    # thinning interval
nb <- 20000  # nb iterations as burn-in
nc <- 2      # nb chains
# Run BYM IMD
BYMIMDsamples <- nimbleMCMC(code = BYMCodeIMD,
data = StillbirthDataBYM_IMD,
constants = StillbirthConstBYM_IMD,
inits = initsBYMIMD,
monitors = paramsBYMIMD,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
# Check convergence - BYM IMD
#traceplots and autocorrelation of parameters of interest
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p5
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p6
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p7
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.theta") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p8
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_traceplot() + theme_bw() -> p9
BYMIMD_ggmcmc %>% filter(Parameter %in% c("RR.beta")) %>%
ggs_autocorrelation() + theme_bw() -> p10
# traceplots and autocorrelation plots
p5/p6
p7/p8
p9/p10
# Gelman_and Rubin's convergence diagnostic
GR.diag_BYMIMD <- gelman.diag(BYMIMDsamples$samples, multivariate = FALSE)
all(GR.diag_BYMIMD$psrf[,"Point est."] < 1.1, na.rm = TRUE)
which(GR.diag_BYMIMD$psrf[,"Point est."] > 1.1)
# Estimated sample size calculation
effectiveSize(BYM2IMDsamples$samples$chain1)
effectiveSize(BYM2IMDsamples$samples$chain2)
# Estimated sample size calculation
BYM_effective_size_1 <- effectiveSize(BYMIMDsamples$samples$chain1)
# Estimated sample size calculation
BYM_effective_size_1 <- effectiveSize(BYMIMDsamples$samples$chain1)
BYM_effective_size_2 <- effectiveSize(BYMIMDsamples$samples$chain2)
min(BYM_effective_size_1
min(BYM_effective_size_1)
min(BYM_effective_size_1)
which.min(BYM_effective_size_1)
# MCMC settings
ni <- 500000  # nb iterations
nt <- 200    # thinning interval
nb <- 50000  # nb iterations as burn-in
nc <- 2      # nb chains
# Run BYM IMD
BYMIMDsamples <- nimbleMCMC(code = BYMCodeIMD,
data = StillbirthDataBYM_IMD,
constants = StillbirthConstBYM_IMD,
inits = initsBYMIMD,
monitors = paramsBYMIMD,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
BYM_effective_size_1 <- effectiveSize(BYMIMDsamples$samples$chain1)
BYM_effective_size_2 <- effectiveSize(BYMIMDsamples$samples$chain2)
min(BYM_effective_size_1)
which.min(BYM_effective_size_1)
min(BYM_effective_size_2)
which.min(BYM_effective_size_2)
BYM_effective_size_1
BYMIMD_ggmcmc <- ggs(BYMIMDsamples$samples)
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_traceplot + theme_bw() + theme(text = element_text(size = 12)) -> p5
BYMIMD_ggmcmc %>% filter(Parameter == "sigma2.phi") %>%
ggs_autocorrelation + theme_bw() + theme(text = element_text(size = 12)) -> p6
p5/p6
setwd("/Users/stefanrautenbach/Documents/Imperial/Research_project/Thembisa/THEMBISAv18")
PrevPreg15to49 <- read.delim("~/Documents/Imperial/Research_project/Thembisa/THEMBISAv18/PrevPreg15to49.txt", header=FALSE)
View(PrevPreg15to49)
names(PrevPreg15to49)
View(PrevPreg15to49)
LYlostAIDS <- read.delim("~/Documents/Imperial/Research_project/Thembisa/THEMBISAv18/LYlostAIDS.txt", header=FALSE)
View(LYlostAIDS)
